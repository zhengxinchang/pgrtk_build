/* automatically generated by rust-bindgen 0.60.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct agc_t {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " @param fn\t\t\tfile name"]
    #[doc = " @param prefetching\t1 to preload whole file into memory (faster if you plan series of sequence queries), 0 otherwise"]
    #[doc = ""]
    #[doc = " @return NULL for error"]
    pub fn agc_open(
        fn_: *mut ::std::os::raw::c_char,
        prefetching: ::std::os::raw::c_int,
    ) -> *mut agc_t;
}
extern "C" {
    #[doc = " @param fp   agc handle"]
    #[doc = ""]
    #[doc = " @return 0 for success and -1 for error"]
    pub fn agc_close(agc: *mut agc_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " Get the length of a contig. Return an error if _name_ is not present, or if"]
    #[doc = " _name_ is not unique but _sample_ is NULL,"]
    #[doc = ""]
    #[doc = " @param agc      agc handle"]
    #[doc = " @param sample   sample name; can be NULL"]
    #[doc = " @param name     contig name"]
    #[doc = ""]
    #[doc = " @return contig length, or <0 for errors"]
    pub fn agc_get_ctg_len(
        agc: *const agc_t,
        sample: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @param agc      agc handle"]
    #[doc = " @param sample   sample name; can be NULL"]
    #[doc = " @param name     contig name"]
    #[doc = " @param start    start offset"]
    #[doc = " @param end      end offset"]
    #[doc = " @param buf      sequence to be written; user should allocate memory (returned value)"]
    #[doc = ""]
    #[doc = " @return contig length, or <0 for errors"]
    pub fn agc_get_ctg_seq(
        agc: *const agc_t,
        sample: *const ::std::os::raw::c_char,
        name: *const ::std::os::raw::c_char,
        start: ::std::os::raw::c_int,
        end: ::std::os::raw::c_int,
        buf: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @param agc      agc handle"]
    #[doc = ""]
    #[doc = " @return the number of samples"]
    pub fn agc_n_sample(agc: *const agc_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @param agc      agc handle"]
    #[doc = " @param sample   sample name"]
    #[doc = ""]
    #[doc = " @return the number of contigs in sample"]
    pub fn agc_n_ctg(
        agc: *const agc_t,
        sample: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[doc = " @param agc       agc handle"]
    #[doc = " @param n_sample  number of samples to be written to (returned value)"]
    #[doc = ""]
    #[doc = " @return array of NULL-terminated strings. Use agc_list_destroy() to deallocate."]
    pub fn agc_list_sample(
        agc: *const agc_t,
        n_sample: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " @param agc       agc handle"]
    #[doc = " @param sample    sample name; can be NULL"]
    #[doc = " @param n_ctg     number of contigs in the sample (returned value)"]
    #[doc = ""]
    #[doc = " @return array of NULL-terminated strings. Use agc_list_destroy() to deallocate."]
    pub fn agc_list_ctg(
        agc: *const agc_t,
        sample: *const ::std::os::raw::c_char,
        n_ctg: *mut ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    #[doc = " Deallocate an array of strings returned by agc_list_samples or agc_list_ctg"]
    #[doc = ""]
    #[doc = " @param list      array to deallocate"]
    pub fn agc_list_destroy(list: *mut *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
